<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<qualifiedTypeNameHistroy>
<fullyQualifiedTypeName name="com.meli.bill.model.to.ChargeTO"/>
<fullyQualifiedTypeName name="org.bson.codecs.configuration.Optional.Some"/>
<fullyQualifiedTypeName name="org.mockito.internal.matchers.Any"/>
<fullyQualifiedTypeName name="org.mockito.Matchers"/>
<fullyQualifiedTypeName name="com.meli.bill.model.Charge"/>
<fullyQualifiedTypeName name="com.meli.bill.DateHelper"/>
<fullyQualifiedTypeName name="com.meli.bill.exception.ChargeAndPayAlreadyProccessedException"/>
<fullyQualifiedTypeName name="org.mockito.InjectMocks"/>
<fullyQualifiedTypeName name="org.junit.jupiter.api.Test"/>
<fullyQualifiedTypeName name="java.lang.IllegalArgumentException"/>
<fullyQualifiedTypeName name="java.lang.RuntimeException"/>
<fullyQualifiedTypeName name="com.meli.charge.exception.ChargeTypeNotFoundException"/>
<fullyQualifiedTypeName name="com.meli.charge.service.ChargeServiceTest"/>
<fullyQualifiedTypeName name="com.meli.charge.repository.ChargeRepository"/>
<fullyQualifiedTypeName name="com.meli.charge.repository.ChargeTypeRepository"/>
<fullyQualifiedTypeName name="java.lang.Object"/>
<fullyQualifiedTypeName name="com.meli.charge.model.ChargeType"/>
<fullyQualifiedTypeName name="java.lang.Void"/>
<fullyQualifiedTypeName name="java.lang.Double"/>
<fullyQualifiedTypeName name="org.hamcrest.core.IsNull"/>
<fullyQualifiedTypeName name="com.meli.bill.model.Bill"/>
<fullyQualifiedTypeName name="org.mockito.stubbing.Answer"/>
<fullyQualifiedTypeName name="org.mockito.invocation.InvocationOnMock"/>
<fullyQualifiedTypeName name="com.meli.bill.exception.ParamMandatoryException"/>
<fullyQualifiedTypeName name="com.meli.charge.exception.ChargeOutOfDateException"/>
<fullyQualifiedTypeName name="org.assertj.core.util.DateUtil"/>
<fullyQualifiedTypeName name="com.meli.charge.DateHelper"/>
<fullyQualifiedTypeName name="com.meli.charge.exception.PaymentExceedsTotalDebtException"/>
<fullyQualifiedTypeName name="com.meli.charge.model.Charge"/>
<fullyQualifiedTypeName name="com.meli.charge.api.response.TotalPendingChargeResponse"/>
<fullyQualifiedTypeName name="org.junit.Assert"/>
<fullyQualifiedTypeName name="com.meli.payment.service.PaymentService"/>
<fullyQualifiedTypeName name="org.springframework.stereotype.Indexed"/>
<fullyQualifiedTypeName name="org.springframework.data.mongodb.core.index.Indexed"/>
<fullyQualifiedTypeName name="org.junit.Test"/>
<fullyQualifiedTypeName name="com.meli.payment.exception.PaymentAlreadyProcessedException"/>
<fullyQualifiedTypeName name="org.mockito.Mock"/>
<fullyQualifiedTypeName name="com.meli.payment.exception.PaymentExceedsTotalDebtException"/>
<fullyQualifiedTypeName name="com.meli.payment.repository.PaymentRepository"/>
<fullyQualifiedTypeName name="org.mockito.ArgumentMatcher"/>
<fullyQualifiedTypeName name="org.mockito.ArgumentMatchers"/>
<fullyQualifiedTypeName name="org.springframework.web.servlet.mvc.method.RequestMappingInfo.BuilderConfiguration"/>
<fullyQualifiedTypeName name="com.meli.charge.service.ChargeServiceTest.BuilderEvtCharge"/>
<fullyQualifiedTypeName name="com.meli.charge.api.request.ChargeEvent"/>
<fullyQualifiedTypeName name="com.meli.payment.model.Payment"/>
<fullyQualifiedTypeName name="com.meli.payment.api.request.PaymentEvent"/>
<fullyQualifiedTypeName name="java.util.Collections"/>
<fullyQualifiedTypeName name="java.util.Date"/>
<fullyQualifiedTypeName name="org.springframework.data.annotation.Id"/>
<fullyQualifiedTypeName name="org.apache.catalina.filters.SetCharacterEncodingFilter"/>
<fullyQualifiedTypeName name="com.meli.payment.model.Charge"/>
<fullyQualifiedTypeName name="java.util.List"/>
<fullyQualifiedTypeName name="com.meli.charge.model.Payment"/>
<fullyQualifiedTypeName name="com.meli.charge.model.to.PaymentTO"/>
<fullyQualifiedTypeName name="com.meli.charge.model.to.ChargeTO"/>
<fullyQualifiedTypeName name="java.io.Serializable"/>
<fullyQualifiedTypeName name="java.util.LinkedHashMap"/>
<fullyQualifiedTypeName name="java.util.ArrayList"/>
<fullyQualifiedTypeName name="com.meli.payment.model.to.ChargeTO"/>
<fullyQualifiedTypeName name="java.util.Arrays"/>
</qualifiedTypeNameHistroy>
