package com.meli.charge.model;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;

import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.ml.cobranzasmeli.DateHelper;

@Document(collection = "charges")
public class Cargo {

	@JsonIgnore
	private Integer id;
	@JsonIgnore
	private Integer idUsuario;
	private Double amount;
	private Double amountPending;
	private TipoCargo tipo;
	private Timestamp date;
	@JsonIgnore
	private Integer version;

	@JsonIgnore
	private EventoCargo eventoOrigen;
	private List<Pago> pagos;

	public Cargo() {
		setPagos(new ArrayList<Pago>());
	}

	public Cargo(EventoCargo eventoOrigen, TipoCargo tipoCargo) {
		this();
		setEventoOrigen(eventoOrigen);
		setIdUsuario(eventoOrigen.getUser_id());
		setTipo(tipoCargo);
		setDate(DateHelper.getInstance().stringToTimestamp(eventoOrigen.getDate()));
	}

	@Id
	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public Integer getIdUsuario() {
		return idUsuario;
	}

	public void setIdUsuario(Integer idUsuario) {
		this.idUsuario = idUsuario;
	}

	public Double getAmount() {
		return amount;
	}

	public void setAmount(Double amount) {
		this.amount = amount;
	}

	public Double getAmountPending() {
		return amountPending;
	}

	public void setAmountPending(Double amountPending) {
		this.amountPending = amountPending;
	}

	@ManyToOne
	@JoinColumn(name="F_TIPO_P_ID", nullable = false)
	public TipoCargo getTipo() {
		return tipo;
	}

	public void setTipo(TipoCargo tipo) {
		this.tipo = tipo;
	}

	@Column(name = "DATE", nullable=false)
	public Timestamp getDate() {
		return date;
	}

	public void setDate(Timestamp date) {
		this.date = date;
	}

	public EventoCargo getEventoOrigen() {
		return eventoOrigen;
	}

	private void setEventoOrigen(EventoCargo eventoOrigen) {
		this.eventoOrigen = eventoOrigen;
	}

	private List<Pago> getPagos() {
		return pagos;
	}

	private void setPagos(List<Pago> pagos) {
		this.pagos = pagos;
	}

	public Integer getVersion() {
		return version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	public void descontarYAsociarPago(Pago pago, Double amount) {
		if(getAmountPending() < amount) {
			throw new IllegalArgumentException(String.format("El monto del cargo % por saldar es menor al monto recibido por descontar %", getAmountPending(), pago.getAmount()));
		}
		setAmountPending(getAmountPending() - amount);
		getPagos().add(pago);
	}

}