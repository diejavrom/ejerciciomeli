package com.meli.payment.service;

import java.util.List;

import javax.jms.Queue;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.stereotype.Service;

import com.google.gson.Gson;
import com.meli.payment.exception.ParamMandatoryException;
import com.meli.payment.exception.PaymentAlreadyProcessedException;
import com.meli.payment.exception.PaymentExceedsTotalDebtException;
import com.meli.payment.model.Payment;
import com.meli.payment.repository.PaymentRepository;

@Service
public class PaymentService {

	@Autowired
	private JmsTemplate jmsTemplate;

	@Autowired
	private Queue queueCharge;

	@Autowired
	private PaymentRepository paymentRepo;
	
	@Autowired
	private Gson gson;

	@Autowired
	private ChargeService chargeService;

	@Autowired
	private CurrencyService currencyService;

	public String createPayment(Payment payment) {

		checkPayment(payment);

		Double originalAmount = payment.getAmount();
		Double amountInCurrencyDefault = currencyService.convertToCurrencyDefault(payment.getCurrency(), originalAmount);
		
		checkDebtTotal(payment, amountInCurrencyDefault);

		payment.setAmount(amountInCurrencyDefault);
		payment.setOriginalAmount(originalAmount);
		Payment paymentInserted = paymentRepo.insert(payment);

		String paymentStr = gson.toJson(paymentInserted);
		jmsTemplate.convertAndSend(queueCharge, paymentStr);

		return paymentInserted.getId();
	}

	private void checkDebtTotal(Payment payment, Double amountInCurrencyDefault) {
		Double totalDebt = chargeService.getTotalDebt(payment.getUserId());

		if(amountInCurrencyDefault > totalDebt) {
			throw new PaymentExceedsTotalDebtException(String.format("El pago con monto '%1$,.2f' excede la deuda del usuario '%2$,.2f'", amountInCurrencyDefault, totalDebt));
		}
	}

	private void checkPayment(Payment payment) {
		if(payment.getAmount() == null || payment.getAmount() <= 0) {
			throw new ParamMandatoryException("amount no puede ser null ni menor o igual que cero");
		}
		if(payment.getCurrency() == null) {
			throw new ParamMandatoryException("currency no puede ser null");
		}
		if(payment.getUserId() == null) {
			throw new ParamMandatoryException("user_id no puede ser null");
		}
		
		if(paymentRepo.existsById(payment.getId())) {
			throw new PaymentAlreadyProcessedException(String.format("Ya existe un pago con ID '%s'", payment.getId()));
		}
	}

	public List<Payment> listByUserId(Integer user_id) {
		return paymentRepo.findByUserId(user_id);
	}

	public Double totalPayment(@Valid Integer user_id) {
		//FIXME: ver de hacer el query directamente desde mongo
		List<Payment> allPayments = paymentRepo.findByUserId(user_id);
		double totalDebt = allPayments.stream().map(c -> c.getAmount()).reduce(0d, (ap1 , ap2) -> ap1 + ap2).doubleValue();
		return totalDebt;
	}

}