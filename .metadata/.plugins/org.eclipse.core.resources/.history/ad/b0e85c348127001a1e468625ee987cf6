package com.meli.bill.service;

import java.sql.Timestamp;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.meli.bill.DateHelper;
import com.meli.bill.model.Bill;
import com.meli.bill.model.Charge;
import com.meli.bill.model.to.ChargeTO;
import com.meli.bill.repository.BillRepository;

@Service
public class BillService {

	@Autowired
	private BillRepository billRepo;

	public Bill getBillByUserMonthYear(Integer userId, Integer month, Integer year) {
		List<Bill> bills = billRepo.findByUserIdMonthYear(userId, month, year);
		if(bills.isEmpty()) {
			return null;
		} else if(bills.size() > 1) {
			throw new IllegalStateException(String.format("Existe más de una factura para el mes '%d' y año '%d' asociada al usuario '%d'", month, year, userId));
		} else {
			return bills.iterator().next();
		}
	}

	public List<Bill> getBills(Integer user_id) {
		return billRepo.findByUserId(user_id);
	}

	public void addChargeToBill(ChargeTO chargeTO) {
		//TODO: check chargeTO params

		Timestamp now = DateHelper.getInstance().getNow();
		Integer month = DateHelper.getInstance().getMonth(now);
		Integer year = DateHelper.getInstance().getYear(now);
		Integer userId = chargeTO.getUserId();
		Bill bill = getBillByUserMonthYear(userId, month, year);
		if(bill == null) {
			bill = new Bill(userId, month, year);
		}
	
		if(chargeTO.getPaymentId() != null) {
			boolean existsChargeWithPayment = bill.existsChargeWithPayment(chargeTO.getId(), chargeTO.getPaymentId());
			if(existsChargeWithPayment) {
				//TODO: lanzar excepcion, cargo ya procesado en factura
			}
		}

		Charge charge = bill.getChargeById(chargeTO.getId());
		if(charge == null) {
			charge = new Charge(chargeTO);
		} else {
			charge.updateWithChargeTOInfo(chargeTO);
		}
		
		bill.addCharge(charge);
		
		billRepo.save(bill);
	}


}